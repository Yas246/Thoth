"""
Module de d√©tection de mot de r√©veil pour Thoth
Utilise Porcupine pour d√©tecter des mots cl√©s comme "Ok Thoth" ou "Hey Thoth"
"""

import os
import struct
import logging
import threading
import time
from typing import Optional, Callable
from queue import Queue
import pvporcupine
import pyaudio
import numpy as np

class WakeWordModule:
    def __init__(self, 
                 access_key: str,
                 wake_word: str = "jarvis",  # Mot par d√©faut disponible gratuitement
                 sensitivity: float = 0.5,
                 audio_device_index: Optional[int] = None):
        """
        Initialise le module de d√©tection de mot de r√©veil
        
        Args:
            access_key: Cl√© d'acc√®s Picovoice (gratuite pour usage personnel)
            wake_word: Mot de r√©veil √† d√©tecter
            sensitivity: Sensibilit√© de d√©tection (0-1)
            audio_device_index: Index du p√©riph√©rique audio √† utiliser
        """
        self.logger = logging.getLogger(__name__)
        self.access_key = access_key
        self.wake_word = wake_word
        self.sensitivity = sensitivity
        self.audio_device_index = audio_device_index
        
        # √âtat du module
        self.is_running = False
        self.detection_thread = None
        self.audio_stream = None
        self.porcupine = None
        self.pyaudio_instance = None
        
        # File pour les callbacks de d√©tection
        self.callback_queue = Queue()
        
        # Initialisation de Porcupine
        try:
            self.porcupine = pvporcupine.create(
                access_key=access_key,
                keywords=[wake_word],
                sensitivities=[sensitivity]
            )
            self.logger.info(f"Module de d√©tection initialis√© avec le mot '{wake_word}'")
        except Exception as e:
            self.logger.error(f"Erreur lors de l'initialisation de Porcupine: {e}")
            raise
    
    def start(self, callback: Callable[[], None]):
        """
        D√©marre la d√©tection en arri√®re-plan
        
        Args:
            callback: Fonction √† appeler quand le mot de r√©veil est d√©tect√©
        """
        if self.is_running:
            self.logger.warning("La d√©tection est d√©j√† en cours")
            return
        
        try:
            self.pyaudio_instance = pyaudio.PyAudio()
            
            # Configuration du flux audio
            self.audio_stream = self.pyaudio_instance.open(
                rate=self.porcupine.sample_rate,
                channels=1,
                format=pyaudio.paInt16,
                input=True,
                frames_per_buffer=self.porcupine.frame_length,
                input_device_index=self.audio_device_index
            )
            
            # D√©marrage du thread de d√©tection
            self.is_running = True
            self.detection_thread = threading.Thread(
                target=self._detection_loop,
                args=(callback,),
                daemon=True
            )
            self.detection_thread.start()
            
            self.logger.info("D√©tection du mot de r√©veil d√©marr√©e")
            
        except Exception as e:
            self.logger.error(f"Erreur lors du d√©marrage de la d√©tection: {e}")
            self.stop()
            raise
    
    def stop(self):
        """Arr√™te la d√©tection"""
        self.is_running = False
        
        if self.detection_thread:
            self.detection_thread.join(timeout=2)
            self.detection_thread = None
        
        if self.audio_stream:
            self.audio_stream.stop_stream()
            self.audio_stream.close()
            self.audio_stream = None
        
        if self.pyaudio_instance:
            self.pyaudio_instance.terminate()
            self.pyaudio_instance = None
        
        if self.porcupine:
            self.porcupine.delete()
            self.porcupine = None
        
        self.logger.info("D√©tection du mot de r√©veil arr√™t√©e")
    
    def _detection_loop(self, callback: Callable[[], None]):
        """Boucle principale de d√©tection"""
        try:
            while self.is_running:
                # Lecture de l'audio
                pcm = self.audio_stream.read(self.porcupine.frame_length, exception_on_overflow=False)
                pcm = struct.unpack_from("h" * self.porcupine.frame_length, pcm)
                
                # D√©tection
                keyword_index = self.porcupine.process(pcm)
                
                # Si d√©tection, appel du callback
                if keyword_index >= 0:
                    self.logger.info(f"Mot de r√©veil '{self.wake_word}' d√©tect√©!")
                    try:
                        callback()
                    except Exception as e:
                        self.logger.error(f"Erreur dans le callback de d√©tection: {e}")
        
        except Exception as e:
            self.logger.error(f"Erreur dans la boucle de d√©tection: {e}")
            self.is_running = False
    
    @staticmethod
    def list_audio_devices() -> list:
        """Liste les p√©riph√©riques audio disponibles"""
        devices = []
        try:
            p = pyaudio.PyAudio()
            for i in range(p.get_device_count()):
                device_info = p.get_device_info_by_index(i)
                if device_info['maxInputChannels'] > 0:  # Uniquement les p√©riph√©riques d'entr√©e
                    devices.append({
                        'index': i,
                        'name': device_info['name'],
                        'channels': device_info['maxInputChannels'],
                        'sample_rate': device_info['defaultSampleRate']
                    })
            p.terminate()
        except Exception as e:
            logging.error(f"Erreur lors de la liste des p√©riph√©riques: {e}")
        return devices


def test_wake_word_module():
    """Fonction de test du module"""
    print("\n=== Test du module de d√©tection de mot de r√©veil ===")
    
    # Configuration du logging
    logging.basicConfig(level=logging.INFO)
    
    # Liste des p√©riph√©riques audio
    print("\nüì± P√©riph√©riques audio disponibles:")
    devices = WakeWordModule.list_audio_devices()
    for device in devices:
        print(f"  [{device['index']}] {device['name']}")
    
    # Demande de la cl√© d'acc√®s
    access_key = input("\nüîë Entrez votre cl√© d'acc√®s Picovoice: ")
    if not access_key:
        print("‚ùå Cl√© d'acc√®s requise pour le test")
        return
    
    try:
        # Cr√©ation du module
        wake_word_detector = WakeWordModule(
            access_key=access_key,
            wake_word="computer",  # Mot gratuit par d√©faut
            sensitivity=0.5
        )
        
        print("\nüé§ D√©marrage de la d√©tection...")
        print("Dites 'computer' pour tester (Ctrl+C pour arr√™ter)")
        
        # Callback de test
        def on_detection():
            print("\n‚ú® Mot de r√©veil d√©tect√©!")
            print("Dites 'computer' pour tester √† nouveau...")
        
        # D√©marrage de la d√©tection
        wake_word_detector.start(on_detection)
        
        # Attente de l'interruption
        try:
            while True:
                time.sleep(0.1)
        except KeyboardInterrupt:
            print("\n\nüõë Arr√™t demand√©...")
        
        # Arr√™t propre
        wake_word_detector.stop()
        print("‚úÖ Test termin√©")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")


if __name__ == "__main__":
    test_wake_word_module() 